/*
Navicat MySQL Data Transfer

Source Server         : localhost_3306
Source Server Version : 50713
Source Host           : localhost:3306
Source Database       : emsdb

Target Server Type    : MYSQL
Target Server Version : 50713
File Encoding         : 65001

Date: 2018-03-01 00:14:31
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for t_ccf
-- ----------------------------
DROP TABLE IF EXISTS `t_ccf`;
CREATE TABLE `t_ccf` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `试题编号` varchar(30) NOT NULL,
  `试题名称` varchar(50) NOT NULL,
  `时间限制` varchar(20) NOT NULL,
  `内存限制` varchar(30) NOT NULL,
  `问题描述` text NOT NULL,
  `参考答案` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=234 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_ccf
-- ----------------------------
INSERT INTO `t_ccf` VALUES ('214', '201509-1', '数列分段', '1.0s ', '256.0MB', '问题描述    给定一个整数数列，数列中连续相同的最长整数序列算成一段，问数列中共有多少段？ 输入格式    输入的第一行包含一个整数n，表示数列中整数的个数。    第二行包含n个整数a1, a2, …, an，表示给定的数列，相邻的整数之间用一个空格分隔。 输出格式    输出一个整数，表示给定的数列有多个段。 样例输入  8  8 8 8 0 12 12 8 0  样例输出  5  样例说明    8 8 8是第一段，0是第二段，12 12是第三段，倒数第二个整数8是第四段，最后一个0是第五段。 评测用例规模与约定    1 ≤ n ≤ 1000，0 ≤ ai ≤ 1000。', '无');
INSERT INTO `t_ccf` VALUES ('215', '201509-2', '日期计算', '1.0s', '256.0MB ', '问题描述    给定一个年份y和一个整数d，问这一年的第d天是几月几日？   注意闰年的2月有29天。满足下面条件之一的是闰年：   1） 年份是4的整数倍，而且不是100的整数倍；   2） 年份是400的整数倍。 输入格式    输入的第一行包含一个整数y，表示年份，年份在1900到2015之间（包含1900和2015）。    输入的第二行包含一个整数d，d在1至365之间。 输出格式    输出两行，每行一个整数，分别表示答案的月份和日期。 样例输入  2015 80  样例输出  3 21  样例输入2000 40  样例输出  2 9', '无');
INSERT INTO `t_ccf` VALUES ('216', '201503-1', '图像旋转', '5.0s ', '256.0MB ', '问题描述    旋转是图像处理的基本操作，在这个问题中，你需要将一个图像逆时针旋转90度。    计算机中的图像表示可以用一个矩阵来表示，为了旋转一个图像，只需要将对应的矩阵旋转即可。 输入格式    输入的第一行包含两个整数n, m，分别表示图像矩阵的行数和列数。   接下来n行每行包含m个整数，表示输入的图像。 输出格式    输出m行，每行包含n个整数，表示原始矩阵逆时针旋转90度后的矩阵。  样例输入  2 3 1 5 3 3 2 4  样例输出  3 4 5 2 1 3  评测用例规模与约定    1 ≤ n, m ≤ 1,000，矩阵中的数都是不超过1000的非负整数。', '无');
INSERT INTO `t_ccf` VALUES ('217', '201503-2', '数字排序', '1.0s ', '256.0MB ', '问题描述    给定n个整数，请统计出每个整数出现的次数，按出现次数从多到少的顺序输出。 输入格式    输入的第一行包含一个整数n，表示给定数字的个数。    第二行包含n个整数，相邻的整数之间用一个空格分隔，表示所给定的整数。 输出格式    输出多行，每行包含两个整数，分别表示一个给定的整数和它出现的次数。按出现次数递减的顺序输出。如果两个整数出现的次数一样多，则先输出值较小的，然后输出值较大的。 样例输入  12  5 2 3 3 1 3 4 2 5 2 3 5  样例输出  3 4 2 3 5 3 1 1 4 1  评测用例规模与约定    1 ≤ n ≤ 1000，给出的数都是不超过1000的非负整数。', '无');
INSERT INTO `t_ccf` VALUES ('218', '201503-3 ', '节日', '1.0s ', '256.0MB ', '问题描述    有一类节日的日期并不是固定的，而是以“a月的第b个星期c”的形式定下来的，比如说母亲节就定为每年的五月的第二个星期日。    现在，给你a，b，c和y1, y2(1850 ≤ y1, y2 ≤ 2050)，希望你输出从公元y1年到公元y2年间的每年的a月的第b个星期c的日期。    提示：关于闰年的规则：年份是400的整数倍时是闰年，否则年份是4的倍数并且不是100的倍数时是闰年，其他年份都不是闰年。例如1900年就不是闰年，而2000年是闰年。    为了方便你推算，已知1850年1月1日是星期二。 输入格式    输入包含恰好一行，有五个整数a, b, c, y1, y2。其中c=1, 2, ……, 6, 7分别表示星期一、二、……、六、日。 输出格式    对于y1和y2之间的每一个年份，包括y1和y2，按照年份从小到大的顺序输出一行。    如果该年的a月第b个星期c确实存在，则以\"yyyy/mm/dd\"的格式输出，即输出四位数的年份，两位数的月份，两位数的日期，中间用斜杠“/”分隔，位数不足时前补零。    如果该年的a月第b个星期c并不存在，则输出\"none\"（不包含双引号)。 样例输入  5 2 7 2014 2015  样例输出  2014/05/11 2015/05/10  评测用例规模与约定    所有评测用例都满足：1 ≤ a ≤ 12，1 ≤ b ≤ 5，1 ≤ c ≤ 7，1850 ≤ y1, y2 ≤ 2050。', '无');
INSERT INTO `t_ccf` VALUES ('219', '201412-1', '门禁系统', '1.0s ', '256.0MB ', '问题描述    涛涛最近要负责图书馆的管理工作，需要记录下每天读者的到访情况。每位读者有一个编号，每条记录用读者的编号来表示。给出读者的来访记录，请问每一条记录中的读者是第几次出现。 输入格式    输入的第一行包含一个整数n，表示涛涛的记录条数。    第二行包含n个整数，依次表示涛涛的记录中每位读者的编号。 输出格式    输出一行，包含n个整数，由空格分隔，依次表示每条记录中的读者编号是第几次出现。 样例输入  5  1 2 1 1 3  样例输出  1 1 2 3 1  评测用例规模与约定    1≤n≤1,000，读者的编号为不超过n的正整数。', '无');
INSERT INTO `t_ccf` VALUES ('220', '201409-1', '相邻数对', '1.0s ', '256.0MB ', '问题描述    给定n个不同的整数，问这些数中有多少对整数，它们的值正好相差1。 输入格式    输入的第一行包含一个整数n，表示给定整数的个数。   第二行包含所给定的n个整数。 输出格式    输出一个整数，表示值正好相差1的数对的个数。 样例输入  6  10 2 6 3 7 8  样例输出  3  样例说明    值正好相差1的数对包括(2, 3), (6, 7), (7, 8)。 评测用例规模与约定    1<=n<=1000，给定的整数为不超过10000的非负整数。', '无');
INSERT INTO `t_ccf` VALUES ('221', '201409-3', '字符串匹配 ', '1.0s ', '256.0MB ', '问题描述    给出一个字符串和多行文字，在这些文字中找到字符串出现的那些行。你的程序还需支持大小写敏感选项：当选项打开时，表示同一个字母的大写和小写看作不同的字符；当选项关闭时，表示同一个字母的大写和小写看作相同的字符。 输入格式    输入的第一行包含一个字符串S，由大小写英文字母组成。    第二行包含一个数字，表示大小写敏感的选项，当数字为0时表示大小写不敏感，当数字为1时表示大小写敏感。    第三行包含一个整数n，表示给出的文字的行数。    接下来n行，每行包含一个字符串，字符串由大小写英文字母组成，不含空格和其他字符。 输出格式    输出多行，每行包含一个字符串，按出现的顺序依次给出那些包含了字符串S的行。 样例输入  Hello 1 5  HelloWorld HiHiHelloHiHi GrepIsAGreatTool HELLO  HELLOisNOTHello  样例输出  HelloWorld HiHiHelloHiHi HELLOisNOTHello  样例说明    在上面的样例中，第四个字符串虽然也是Hello，但是大小写不正确。如果将输入的第二行改为0，则第四个字符串应该输出。 评测用例规模与约定    1<=n<=100，每个字符串的长度不超过100。', '无');
INSERT INTO `t_ccf` VALUES ('222', '201403-1', '相反数 ', '1.0s ', '256.0MB ', '问题描述    有 N 个非零且各不相同的整数。请你编一个程序求出它们中有多少对相反数(a 和 -a 为一对相反数)。 输入格式    第一行包含一个正整数 N。(1 ≤ N ≤ 500)。    第二行为 N 个用单个空格隔开的非零整数,每个数的绝对值不超过1000,保证这些整数各不相同。 输出格式    只输出一个整数,即这 N 个数中包含多少对相反数。 样例输入  5  1 2 3 -1 -2  样例输出  2', '无');
INSERT INTO `t_ccf` VALUES ('223', '201312-1', '出现次数最多的数', '1.0s ', '256.0MB ', '问题描述    给定n个正整数，找出它们中出现次数最多的数。如果这样的数有多个，请输出其中最小的一个。输入格式    输入的第一行只有一个正整数n(1 ≤ n ≤ 1000)，表示数字的个数。   输入的第二行有n个整数s1, s2, …, sn (1 ≤ si ≤ 10000, 1 ≤ i ≤ n)。相邻的数用空格分隔。 输出格式    输出这n个次数中出现次数最多的数。如果这样的数有多个，输出其中最小的一个。 样例输入  6  10 1 10 20 30 20  样例输出  10', '无');
INSERT INTO `t_ccf` VALUES ('224', '201509-1', '数列分段', '1.0s ', '256.0MB', '问题描述    给定一个整数数列，数列中连续相同的最长整数序列算成一段，问数列中共有多少段？ 输入格式    输入的第一行包含一个整数n，表示数列中整数的个数。    第二行包含n个整数a1, a2, …, an，表示给定的数列，相邻的整数之间用一个空格分隔。 输出格式    输出一个整数，表示给定的数列有多个段。 样例输入  8  8 8 8 0 12 12 8 0  样例输出  5  样例说明    8 8 8是第一段，0是第二段，12 12是第三段，倒数第二个整数8是第四段，最后一个0是第五段。 评测用例规模与约定    1 ≤ n ≤ 1000，0 ≤ ai ≤ 1000。', '无');
INSERT INTO `t_ccf` VALUES ('225', '201509-2', '日期计算', '1.0s', '256.0MB ', '问题描述    给定一个年份y和一个整数d，问这一年的第d天是几月几日？   注意闰年的2月有29天。满足下面条件之一的是闰年：   1） 年份是4的整数倍，而且不是100的整数倍；   2） 年份是400的整数倍。 输入格式    输入的第一行包含一个整数y，表示年份，年份在1900到2015之间（包含1900和2015）。    输入的第二行包含一个整数d，d在1至365之间。 输出格式    输出两行，每行一个整数，分别表示答案的月份和日期。 样例输入  2015 80  样例输出  3 21  样例输入2000 40  样例输出  2 9', '无');
INSERT INTO `t_ccf` VALUES ('226', '201503-1', '图像旋转', '5.0s ', '256.0MB ', '问题描述    旋转是图像处理的基本操作，在这个问题中，你需要将一个图像逆时针旋转90度。    计算机中的图像表示可以用一个矩阵来表示，为了旋转一个图像，只需要将对应的矩阵旋转即可。 输入格式    输入的第一行包含两个整数n, m，分别表示图像矩阵的行数和列数。   接下来n行每行包含m个整数，表示输入的图像。 输出格式    输出m行，每行包含n个整数，表示原始矩阵逆时针旋转90度后的矩阵。  样例输入  2 3 1 5 3 3 2 4  样例输出  3 4 5 2 1 3  评测用例规模与约定    1 ≤ n, m ≤ 1,000，矩阵中的数都是不超过1000的非负整数。', '无');
INSERT INTO `t_ccf` VALUES ('227', '201503-2', '数字排序', '1.0s ', '256.0MB ', '问题描述    给定n个整数，请统计出每个整数出现的次数，按出现次数从多到少的顺序输出。 输入格式    输入的第一行包含一个整数n，表示给定数字的个数。    第二行包含n个整数，相邻的整数之间用一个空格分隔，表示所给定的整数。 输出格式    输出多行，每行包含两个整数，分别表示一个给定的整数和它出现的次数。按出现次数递减的顺序输出。如果两个整数出现的次数一样多，则先输出值较小的，然后输出值较大的。 样例输入  12  5 2 3 3 1 3 4 2 5 2 3 5  样例输出  3 4 2 3 5 3 1 1 4 1  评测用例规模与约定    1 ≤ n ≤ 1000，给出的数都是不超过1000的非负整数。', '无');
INSERT INTO `t_ccf` VALUES ('228', '201503-3 ', '节日', '1.0s ', '256.0MB ', '问题描述    有一类节日的日期并不是固定的，而是以“a月的第b个星期c”的形式定下来的，比如说母亲节就定为每年的五月的第二个星期日。    现在，给你a，b，c和y1, y2(1850 ≤ y1, y2 ≤ 2050)，希望你输出从公元y1年到公元y2年间的每年的a月的第b个星期c的日期。    提示：关于闰年的规则：年份是400的整数倍时是闰年，否则年份是4的倍数并且不是100的倍数时是闰年，其他年份都不是闰年。例如1900年就不是闰年，而2000年是闰年。    为了方便你推算，已知1850年1月1日是星期二。 输入格式    输入包含恰好一行，有五个整数a, b, c, y1, y2。其中c=1, 2, ……, 6, 7分别表示星期一、二、……、六、日。 输出格式    对于y1和y2之间的每一个年份，包括y1和y2，按照年份从小到大的顺序输出一行。    如果该年的a月第b个星期c确实存在，则以\"yyyy/mm/dd\"的格式输出，即输出四位数的年份，两位数的月份，两位数的日期，中间用斜杠“/”分隔，位数不足时前补零。    如果该年的a月第b个星期c并不存在，则输出\"none\"（不包含双引号)。 样例输入  5 2 7 2014 2015  样例输出  2014/05/11 2015/05/10  评测用例规模与约定    所有评测用例都满足：1 ≤ a ≤ 12，1 ≤ b ≤ 5，1 ≤ c ≤ 7，1850 ≤ y1, y2 ≤ 2050。', '无');
INSERT INTO `t_ccf` VALUES ('229', '201412-1', '门禁系统', '1.0s ', '256.0MB ', '问题描述    涛涛最近要负责图书馆的管理工作，需要记录下每天读者的到访情况。每位读者有一个编号，每条记录用读者的编号来表示。给出读者的来访记录，请问每一条记录中的读者是第几次出现。 输入格式    输入的第一行包含一个整数n，表示涛涛的记录条数。    第二行包含n个整数，依次表示涛涛的记录中每位读者的编号。 输出格式    输出一行，包含n个整数，由空格分隔，依次表示每条记录中的读者编号是第几次出现。 样例输入  5  1 2 1 1 3  样例输出  1 1 2 3 1  评测用例规模与约定    1≤n≤1,000，读者的编号为不超过n的正整数。', '无');
INSERT INTO `t_ccf` VALUES ('230', '201409-1', '相邻数对', '1.0s ', '256.0MB ', '问题描述    给定n个不同的整数，问这些数中有多少对整数，它们的值正好相差1。 输入格式    输入的第一行包含一个整数n，表示给定整数的个数。   第二行包含所给定的n个整数。 输出格式    输出一个整数，表示值正好相差1的数对的个数。 样例输入  6  10 2 6 3 7 8  样例输出  3  样例说明    值正好相差1的数对包括(2, 3), (6, 7), (7, 8)。 评测用例规模与约定    1<=n<=1000，给定的整数为不超过10000的非负整数。', '无');
INSERT INTO `t_ccf` VALUES ('231', '201409-3', '字符串匹配 ', '1.0s ', '256.0MB ', '问题描述    给出一个字符串和多行文字，在这些文字中找到字符串出现的那些行。你的程序还需支持大小写敏感选项：当选项打开时，表示同一个字母的大写和小写看作不同的字符；当选项关闭时，表示同一个字母的大写和小写看作相同的字符。 输入格式    输入的第一行包含一个字符串S，由大小写英文字母组成。    第二行包含一个数字，表示大小写敏感的选项，当数字为0时表示大小写不敏感，当数字为1时表示大小写敏感。    第三行包含一个整数n，表示给出的文字的行数。    接下来n行，每行包含一个字符串，字符串由大小写英文字母组成，不含空格和其他字符。 输出格式    输出多行，每行包含一个字符串，按出现的顺序依次给出那些包含了字符串S的行。 样例输入  Hello 1 5  HelloWorld HiHiHelloHiHi GrepIsAGreatTool HELLO  HELLOisNOTHello  样例输出  HelloWorld HiHiHelloHiHi HELLOisNOTHello  样例说明    在上面的样例中，第四个字符串虽然也是Hello，但是大小写不正确。如果将输入的第二行改为0，则第四个字符串应该输出。 评测用例规模与约定    1<=n<=100，每个字符串的长度不超过100。', '无');
INSERT INTO `t_ccf` VALUES ('232', '201403-1', '相反数 ', '1.0s ', '256.0MB ', '问题描述    有 N 个非零且各不相同的整数。请你编一个程序求出它们中有多少对相反数(a 和 -a 为一对相反数)。 输入格式    第一行包含一个正整数 N。(1 ≤ N ≤ 500)。    第二行为 N 个用单个空格隔开的非零整数,每个数的绝对值不超过1000,保证这些整数各不相同。 输出格式    只输出一个整数,即这 N 个数中包含多少对相反数。 样例输入  5  1 2 3 -1 -2  样例输出  2', '无');
INSERT INTO `t_ccf` VALUES ('233', '201312-1', '出现次数最多的数', '1.0s ', '256.0MB ', '问题描述    给定n个正整数，找出它们中出现次数最多的数。如果这样的数有多个，请输出其中最小的一个。输入格式    输入的第一行只有一个正整数n(1 ≤ n ≤ 1000)，表示数字的个数。   输入的第二行有n个整数s1, s2, …, sn (1 ≤ si ≤ 10000, 1 ≤ i ≤ n)。相邻的数用空格分隔。 输出格式    输出这n个次数中出现次数最多的数。如果这样的数有多个，输出其中最小的一个。 样例输入  6  10 1 10 20 30 20  样例输出  10', '无');

-- ----------------------------
-- Table structure for t_exam
-- ----------------------------
DROP TABLE IF EXISTS `t_exam`;
CREATE TABLE `t_exam` (
  `e_id` int(11) NOT NULL AUTO_INCREMENT,
  `e_startTime` datetime NOT NULL,
  `e_endTime` datetime NOT NULL,
  `s_id` int(11) NOT NULL,
  PRIMARY KEY (`e_id`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_exam
-- ----------------------------
INSERT INTO `t_exam` VALUES ('28', '2017-05-25 21:30:00', '2017-05-25 23:00:00', '1');
INSERT INTO `t_exam` VALUES ('29', '2017-05-25 21:30:00', '2017-05-25 23:00:00', '2');
INSERT INTO `t_exam` VALUES ('30', '2017-05-27 14:00:00', '2017-05-27 16:00:00', '1');
INSERT INTO `t_exam` VALUES ('31', '2017-05-27 09:00:00', '2017-05-27 11:00:00', '2');
INSERT INTO `t_exam` VALUES ('32', '2017-05-26 10:32:00', '2017-05-26 11:00:00', '1');
INSERT INTO `t_exam` VALUES ('33', '2017-05-26 10:32:00', '2017-05-26 11:00:00', '2');

-- ----------------------------
-- Table structure for t_exam_ccf_question
-- ----------------------------
DROP TABLE IF EXISTS `t_exam_ccf_question`;
CREATE TABLE `t_exam_ccf_question` (
  `ecq_id` int(11) NOT NULL AUTO_INCREMENT,
  `ue_applyId` int(11) NOT NULL,
  `ecq_ccf_q1Id` int(11) NOT NULL,
  `ecq_ccf_q2Id` int(11) NOT NULL,
  `ecq_ccf_q3Id` int(11) NOT NULL,
  `ecq_ccf_q4Id` int(11) NOT NULL,
  `ecq_ccf_q5Id` int(11) NOT NULL,
  PRIMARY KEY (`ecq_id`)
) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_exam_ccf_question
-- ----------------------------
INSERT INTO `t_exam_ccf_question` VALUES ('18', '96', '218', '219', '221', '222', '223');
INSERT INTO `t_exam_ccf_question` VALUES ('19', '94', '216', '218', '220', '221', '222');
INSERT INTO `t_exam_ccf_question` VALUES ('30', '92', '217', '218', '219', '220', '221');
INSERT INTO `t_exam_ccf_question` VALUES ('31', '97', '218', '221', '223', '227', '228');

-- ----------------------------
-- Table structure for t_login_user
-- ----------------------------
DROP TABLE IF EXISTS `t_login_user`;
CREATE TABLE `t_login_user` (
  `lu_id` int(11) NOT NULL AUTO_INCREMENT,
  `u_number` varchar(20) NOT NULL,
  `lu_ip` varchar(20) NOT NULL,
  `lu_status` int(11) NOT NULL,
  `lu_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`lu_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_login_user
-- ----------------------------

-- ----------------------------
-- Table structure for t_qss
-- ----------------------------
DROP TABLE IF EXISTS `t_qss`;
CREATE TABLE `t_qss` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ue_id` int(11) NOT NULL,
  `e_id` int(11) NOT NULL,
  `e_question` text NOT NULL,
  `cq_answer` text NOT NULL,
  `cq_check` int(11) unsigned zerofill NOT NULL,
  `cq_score` decimal(10,1) unsigned zerofill NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=145 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_qss
-- ----------------------------
INSERT INTO `t_qss` VALUES ('125', '96', '223', '问题描述    给定n个正整数，找出它们中出现次数最多的数。如果这样的数有多个，请输出其中最小的一个。输入格式    输入的第一行只有一个正整数n(1 ≤ n ≤ 1000)，表示数字的个数。   输入的第二行有n个整数s1, s2, …, sn (1 ≤ si ≤ 10000, 1 ≤ i ≤ n)。相邻的数用空格分隔。 输出格式    输出这n个次数中出现次数最多的数。如果这样的数有多个，输出其中最小的一个。 样例输入  6  10 1 10 20 30 20  样例输出  10', 'int x=1;\\r\\nint y=1;\\r\\nint z;\\r\\nz=x+y;\\r\\n//111111', '00000000001', '000000005.0');
INSERT INTO `t_qss` VALUES ('126', '96', '221', '问题描述    给出一个字符串和多行文字，在这些文字中找到字符串出现的那些行。你的程序还需支持大小写敏感选项：当选项打开时，表示同一个字母的大写和小写看作不同的字符；当选项关闭时，表示同一个字母的大写和小写看作相同的字符。 输入格式    输入的第一行包含一个字符串S，由大小写英文字母组成。    第二行包含一个数字，表示大小写敏感的选项，当数字为0时表示大小写不敏感，当数字为1时表示大小写敏感。    第三行包含一个整数n，表示给出的文字的行数。    接下来n行，每行包含一个字符串，字符串由大小写英文字母组成，不含空格和其他字符。 输出格式    输出多行，每行包含一个字符串，按出现的顺序依次给出那些包含了字符串S的行。 样例输入  Hello 1 5  HelloWorld HiHiHelloHiHi GrepIsAGreatTool HELLO  HELLOisNOTHello  样例输出  HelloWorld HiHiHelloHiHi HELLOisNOTHello  样例说明    在上面的样例中，第四个字符串虽然也是Hello，但是大小写不正确。如果将输入的第二行改为0，则第四个字符串应该输出。 评测用例规模与约定    1<=n<=100，每个字符串的长度不超过100。', 'int x=1;\\r\\nint y=1;\\r\\nint z;\\r\\nz=x+y;\\r\\n//111111', '00000000001', '000000010.0');
INSERT INTO `t_qss` VALUES ('127', '96', '222', '问题描述    有 N 个非零且各不相同的整数。请你编一个程序求出它们中有多少对相反数(a 和 -a 为一对相反数)。 输入格式    第一行包含一个正整数 N。(1 ≤ N ≤ 500)。    第二行为 N 个用单个空格隔开的非零整数,每个数的绝对值不超过1000,保证这些整数各不相同。 输出格式    只输出一个整数,即这 N 个数中包含多少对相反数。 样例输入  5  1 2 3 -1 -2  样例输出  2', 'int x=1;\\r\\nint y=1;\\r\\nint z;\\r\\nz=x+y;\\r\\n//111111', '00000000001', '000000020.0');
INSERT INTO `t_qss` VALUES ('128', '96', '218', '问题描述    有一类节日的日期并不是固定的，而是以“a月的第b个星期c”的形式定下来的，比如说母亲节就定为每年的五月的第二个星期日。    现在，给你a，b，c和y1, y2(1850 ≤ y1, y2 ≤ 2050)，希望你输出从公元y1年到公元y2年间的每年的a月的第b个星期c的日期。    提示：关于闰年的规则：年份是400的整数倍时是闰年，否则年份是4的倍数并且不是100的倍数时是闰年，其他年份都不是闰年。例如1900年就不是闰年，而2000年是闰年。    为了方便你推算，已知1850年1月1日是星期二。 输入格式    输入包含恰好一行，有五个整数a, b, c, y1, y2。其中c=1, 2, ……, 6, 7分别表示星期一、二、……、六、日。 输出格式    对于y1和y2之间的每一个年份，包括y1和y2，按照年份从小到大的顺序输出一行。    如果该年的a月第b个星期c确实存在，则以\"yyyy/mm/dd\"的格式输出，即输出四位数的年份，两位数的月份，两位数的日期，中间用斜杠“/”分隔，位数不足时前补零。    如果该年的a月第b个星期c并不存在，则输出\"none\"（不包含双引号)。 样例输入  5 2 7 2014 2015  样例输出  2014/05/11 2015/05/10  评测用例规模与约定    所有评测用例都满足：1 ≤ a ≤ 12，1 ≤ b ≤ 5，1 ≤ c ≤ 7，1850 ≤ y1, y2 ≤ 2050。', 'int x=1;\\r\\nint y=1;\\r\\nint z;\\r\\nz=x+y;\\r\\n//111111', '00000000001', '000000012.0');
INSERT INTO `t_qss` VALUES ('129', '96', '219', '问题描述    涛涛最近要负责图书馆的管理工作，需要记录下每天读者的到访情况。每位读者有一个编号，每条记录用读者的编号来表示。给出读者的来访记录，请问每一条记录中的读者是第几次出现。 输入格式    输入的第一行包含一个整数n，表示涛涛的记录条数。    第二行包含n个整数，依次表示涛涛的记录中每位读者的编号。 输出格式    输出一行，包含n个整数，由空格分隔，依次表示每条记录中的读者编号是第几次出现。 样例输入  5  1 2 1 1 3  样例输出  1 1 2 3 1  评测用例规模与约定    1≤n≤1,000，读者的编号为不超过n的正整数。', 'int x=1;\\r\\nint y=1;\\r\\nint z;\\r\\nz=x+y;\\r\\n//111111', '00000000001', '000000015.0');
INSERT INTO `t_qss` VALUES ('130', '94', '222', '问题描述    有 N 个非零且各不相同的整数。请你编一个程序求出它们中有多少对相反数(a 和 -a 为一对相反数)。 输入格式    第一行包含一个正整数 N。(1 ≤ N ≤ 500)。    第二行为 N 个用单个空格隔开的非零整数,每个数的绝对值不超过1000,保证这些整数各不相同。 输出格式    只输出一个整数,即这 N 个数中包含多少对相反数。 样例输入  5  1 2 3 -1 -2  样例输出  2', 'int x=1;\\r\\nint y=1;\\r\\nint z;\\r\\nz=x+y;\\r\\n//2222222222222', '00000000001', '000000015.0');
INSERT INTO `t_qss` VALUES ('131', '94', '220', '问题描述    给定n个不同的整数，问这些数中有多少对整数，它们的值正好相差1。 输入格式    输入的第一行包含一个整数n，表示给定整数的个数。   第二行包含所给定的n个整数。 输出格式    输出一个整数，表示值正好相差1的数对的个数。 样例输入  6  10 2 6 3 7 8  样例输出  3  样例说明    值正好相差1的数对包括(2, 3), (6, 7), (7, 8)。 评测用例规模与约定    1<=n<=1000，给定的整数为不超过10000的非负整数。', 'int x=1;\\r\\nint y=1;\\r\\nint z;\\r\\nz=x+y;\\r\\n//2222222222222', '00000000001', '000000015.0');
INSERT INTO `t_qss` VALUES ('132', '94', '221', '问题描述    给出一个字符串和多行文字，在这些文字中找到字符串出现的那些行。你的程序还需支持大小写敏感选项：当选项打开时，表示同一个字母的大写和小写看作不同的字符；当选项关闭时，表示同一个字母的大写和小写看作相同的字符。 输入格式    输入的第一行包含一个字符串S，由大小写英文字母组成。    第二行包含一个数字，表示大小写敏感的选项，当数字为0时表示大小写不敏感，当数字为1时表示大小写敏感。    第三行包含一个整数n，表示给出的文字的行数。    接下来n行，每行包含一个字符串，字符串由大小写英文字母组成，不含空格和其他字符。 输出格式    输出多行，每行包含一个字符串，按出现的顺序依次给出那些包含了字符串S的行。 样例输入  Hello 1 5  HelloWorld HiHiHelloHiHi GrepIsAGreatTool HELLO  HELLOisNOTHello  样例输出  HelloWorld HiHiHelloHiHi HELLOisNOTHello  样例说明    在上面的样例中，第四个字符串虽然也是Hello，但是大小写不正确。如果将输入的第二行改为0，则第四个字符串应该输出。 评测用例规模与约定    1<=n<=100，每个字符串的长度不超过100。', 'int x=1;\\r\\nint y=1;\\r\\nint z;\\r\\nz=x+y;\\r\\n//2222222222222', '00000000001', '000000015.0');
INSERT INTO `t_qss` VALUES ('133', '94', '216', '问题描述    旋转是图像处理的基本操作，在这个问题中，你需要将一个图像逆时针旋转90度。    计算机中的图像表示可以用一个矩阵来表示，为了旋转一个图像，只需要将对应的矩阵旋转即可。 输入格式    输入的第一行包含两个整数n, m，分别表示图像矩阵的行数和列数。   接下来n行每行包含m个整数，表示输入的图像。 输出格式    输出m行，每行包含n个整数，表示原始矩阵逆时针旋转90度后的矩阵。  样例输入  2 3 1 5 3 3 2 4  样例输出  3 4 5 2 1 3  评测用例规模与约定    1 ≤ n, m ≤ 1,000，矩阵中的数都是不超过1000的非负整数。', 'int x=1;\\r\\nint y=1;\\r\\nint z;\\r\\nz=x+y;\\r\\n//2222222222222', '00000000001', '000000015.0');
INSERT INTO `t_qss` VALUES ('134', '94', '218', '问题描述    有一类节日的日期并不是固定的，而是以“a月的第b个星期c”的形式定下来的，比如说母亲节就定为每年的五月的第二个星期日。    现在，给你a，b，c和y1, y2(1850 ≤ y1, y2 ≤ 2050)，希望你输出从公元y1年到公元y2年间的每年的a月的第b个星期c的日期。    提示：关于闰年的规则：年份是400的整数倍时是闰年，否则年份是4的倍数并且不是100的倍数时是闰年，其他年份都不是闰年。例如1900年就不是闰年，而2000年是闰年。    为了方便你推算，已知1850年1月1日是星期二。 输入格式    输入包含恰好一行，有五个整数a, b, c, y1, y2。其中c=1, 2, ……, 6, 7分别表示星期一、二、……、六、日。 输出格式    对于y1和y2之间的每一个年份，包括y1和y2，按照年份从小到大的顺序输出一行。    如果该年的a月第b个星期c确实存在，则以\"yyyy/mm/dd\"的格式输出，即输出四位数的年份，两位数的月份，两位数的日期，中间用斜杠“/”分隔，位数不足时前补零。    如果该年的a月第b个星期c并不存在，则输出\"none\"（不包含双引号)。 样例输入  5 2 7 2014 2015  样例输出  2014/05/11 2015/05/10  评测用例规模与约定    所有评测用例都满足：1 ≤ a ≤ 12，1 ≤ b ≤ 5，1 ≤ c ≤ 7，1850 ≤ y1, y2 ≤ 2050。', 'int x=1;\\r\\nint y=1;\\r\\nint z;\\r\\nz=x+y;\\r\\n//2222222222222', '00000000001', '000000015.0');
INSERT INTO `t_qss` VALUES ('135', '92', '221', '问题描述    给出一个字符串和多行文字，在这些文字中找到字符串出现的那些行。你的程序还需支持大小写敏感选项：当选项打开时，表示同一个字母的大写和小写看作不同的字符；当选项关闭时，表示同一个字母的大写和小写看作相同的字符。 输入格式    输入的第一行包含一个字符串S，由大小写英文字母组成。    第二行包含一个数字，表示大小写敏感的选项，当数字为0时表示大小写不敏感，当数字为1时表示大小写敏感。    第三行包含一个整数n，表示给出的文字的行数。    接下来n行，每行包含一个字符串，字符串由大小写英文字母组成，不含空格和其他字符。 输出格式    输出多行，每行包含一个字符串，按出现的顺序依次给出那些包含了字符串S的行。 样例输入  Hello 1 5  HelloWorld HiHiHelloHiHi GrepIsAGreatTool HELLO  HELLOisNOTHello  样例输出  HelloWorld HiHiHelloHiHi HELLOisNOTHello  样例说明    在上面的样例中，第四个字符串虽然也是Hello，但是大小写不正确。如果将输入的第二行改为0，则第四个字符串应该输出。 评测用例规模与约定    1<=n<=100，每个字符串的长度不超过100。', '<script type=\"text/javascript\">\\r\\n    /*window.onbeforeunload = function(e){\\r\\n     return confirm(\"关闭窗口前先退出，否则未来一定时间将无法登录?\");\\r\\n\\r\\n     }*/\\r\\n    window.history.forward(1);\\r\\n</script>', '00000000001', '000000050.0');
INSERT INTO `t_qss` VALUES ('136', '92', '219', '问题描述    涛涛最近要负责图书馆的管理工作，需要记录下每天读者的到访情况。每位读者有一个编号，每条记录用读者的编号来表示。给出读者的来访记录，请问每一条记录中的读者是第几次出现。 输入格式    输入的第一行包含一个整数n，表示涛涛的记录条数。    第二行包含n个整数，依次表示涛涛的记录中每位读者的编号。 输出格式    输出一行，包含n个整数，由空格分隔，依次表示每条记录中的读者编号是第几次出现。 样例输入  5  1 2 1 1 3  样例输出  1 1 2 3 1  评测用例规模与约定    1≤n≤1,000，读者的编号为不超过n的正整数。', '<script type=\"text/javascript\">\\r\\n    /*window.onbeforeunload = function(e){\\r\\n     return confirm(\"关闭窗口前先退出，否则未来一定时间将无法登录?\");\\r\\n\\r\\n     }*/\\r\\n    window.history.forward(1);\\r\\n</script>', '00000000001', '000000050.0');
INSERT INTO `t_qss` VALUES ('137', '92', '220', '问题描述    给定n个不同的整数，问这些数中有多少对整数，它们的值正好相差1。 输入格式    输入的第一行包含一个整数n，表示给定整数的个数。   第二行包含所给定的n个整数。 输出格式    输出一个整数，表示值正好相差1的数对的个数。 样例输入  6  10 2 6 3 7 8  样例输出  3  样例说明    值正好相差1的数对包括(2, 3), (6, 7), (7, 8)。 评测用例规模与约定    1<=n<=1000，给定的整数为不超过10000的非负整数。', '<script type=\"text/javascript\">\\r\\n    /*window.onbeforeunload = function(e){\\r\\n     return confirm(\"关闭窗口前先退出，否则未来一定时间将无法登录?\");\\r\\n\\r\\n     }*/\\r\\n    window.history.forward(1);\\r\\n</script>', '00000000001', '000000050.0');
INSERT INTO `t_qss` VALUES ('138', '92', '217', '问题描述    给定n个整数，请统计出每个整数出现的次数，按出现次数从多到少的顺序输出。 输入格式    输入的第一行包含一个整数n，表示给定数字的个数。    第二行包含n个整数，相邻的整数之间用一个空格分隔，表示所给定的整数。 输出格式    输出多行，每行包含两个整数，分别表示一个给定的整数和它出现的次数。按出现次数递减的顺序输出。如果两个整数出现的次数一样多，则先输出值较小的，然后输出值较大的。 样例输入  12  5 2 3 3 1 3 4 2 5 2 3 5  样例输出  3 4 2 3 5 3 1 1 4 1  评测用例规模与约定    1 ≤ n ≤ 1000，给出的数都是不超过1000的非负整数。', '<script type=\"text/javascript\">\\r\\n    /*window.onbeforeunload = function(e){\\r\\n     return confirm(\"关闭窗口前先退出，否则未来一定时间将无法登录?\");\\r\\n\\r\\n     }*/\\r\\n    window.history.forward(1);\\r\\n</script>', '00000000001', '000000050.0');
INSERT INTO `t_qss` VALUES ('139', '92', '218', '问题描述    有一类节日的日期并不是固定的，而是以“a月的第b个星期c”的形式定下来的，比如说母亲节就定为每年的五月的第二个星期日。    现在，给你a，b，c和y1, y2(1850 ≤ y1, y2 ≤ 2050)，希望你输出从公元y1年到公元y2年间的每年的a月的第b个星期c的日期。    提示：关于闰年的规则：年份是400的整数倍时是闰年，否则年份是4的倍数并且不是100的倍数时是闰年，其他年份都不是闰年。例如1900年就不是闰年，而2000年是闰年。    为了方便你推算，已知1850年1月1日是星期二。 输入格式    输入包含恰好一行，有五个整数a, b, c, y1, y2。其中c=1, 2, ……, 6, 7分别表示星期一、二、……、六、日。 输出格式    对于y1和y2之间的每一个年份，包括y1和y2，按照年份从小到大的顺序输出一行。    如果该年的a月第b个星期c确实存在，则以\"yyyy/mm/dd\"的格式输出，即输出四位数的年份，两位数的月份，两位数的日期，中间用斜杠“/”分隔，位数不足时前补零。    如果该年的a月第b个星期c并不存在，则输出\"none\"（不包含双引号)。 样例输入  5 2 7 2014 2015  样例输出  2014/05/11 2015/05/10  评测用例规模与约定    所有评测用例都满足：1 ≤ a ≤ 12，1 ≤ b ≤ 5，1 ≤ c ≤ 7，1850 ≤ y1, y2 ≤ 2050。', '<script type=\"text/javascript\">\\r\\n    /*window.onbeforeunload = function(e){\\r\\n     return confirm(\"关闭窗口前先退出，否则未来一定时间将无法登录?\");\\r\\n\\r\\n     }*/\\r\\n    window.history.forward(1);\\r\\n</script>', '00000000001', '000000050.0');
INSERT INTO `t_qss` VALUES ('140', '97', '228', '问题描述    有一类节日的日期并不是固定的，而是以“a月的第b个星期c”的形式定下来的，比如说母亲节就定为每年的五月的第二个星期日。    现在，给你a，b，c和y1, y2(1850 ≤ y1, y2 ≤ 2050)，希望你输出从公元y1年到公元y2年间的每年的a月的第b个星期c的日期。    提示：关于闰年的规则：年份是400的整数倍时是闰年，否则年份是4的倍数并且不是100的倍数时是闰年，其他年份都不是闰年。例如1900年就不是闰年，而2000年是闰年。    为了方便你推算，已知1850年1月1日是星期二。 输入格式    输入包含恰好一行，有五个整数a, b, c, y1, y2。其中c=1, 2, ……, 6, 7分别表示星期一、二、……、六、日。 输出格式    对于y1和y2之间的每一个年份，包括y1和y2，按照年份从小到大的顺序输出一行。    如果该年的a月第b个星期c确实存在，则以\"yyyy/mm/dd\"的格式输出，即输出四位数的年份，两位数的月份，两位数的日期，中间用斜杠“/”分隔，位数不足时前补零。    如果该年的a月第b个星期c并不存在，则输出\"none\"（不包含双引号)。 样例输入  5 2 7 2014 2015  样例输出  2014/05/11 2015/05/10  评测用例规模与约定    所有评测用例都满足：1 ≤ a ≤ 12，1 ≤ b ≤ 5，1 ≤ c ≤ 7，1850 ≤ y1, y2 ≤ 2050。', ' private static String getToday(){\\r\\n		return new SimpleDateFormat(\"yyyyMMdd\").format(new Date());\\r\\n	}\\r\\n	\\r\\n	private static String getYesterday(){\\r\\n		return new SimpleDateFormat(\"yyyyMMdd\").format(new Date(new Da', '00000000001', '000000020.0');
INSERT INTO `t_qss` VALUES ('141', '97', '223', '问题描述    给定n个正整数，找出它们中出现次数最多的数。如果这样的数有多个，请输出其中最小的一个。输入格式    输入的第一行只有一个正整数n(1 ≤ n ≤ 1000)，表示数字的个数。   输入的第二行有n个整数s1, s2, …, sn (1 ≤ si ≤ 10000, 1 ≤ i ≤ n)。相邻的数用空格分隔。 输出格式    输出这n个次数中出现次数最多的数。如果这样的数有多个，输出其中最小的一个。 样例输入  6  10 1 10 20 30 20  样例输出  10', ' private static String getToday(){\\r\\n		return new SimpleDateFormat(\"yyyyMMdd\").format(new Date());\\r\\n	}\\r\\n	\\r\\n	private static String getYesterday(){\\r\\n		return new SimpleDateFormat(\"yyyyMMdd\").format(new Date(new Da', '00000000001', '000000020.0');
INSERT INTO `t_qss` VALUES ('142', '97', '227', '问题描述    给定n个整数，请统计出每个整数出现的次数，按出现次数从多到少的顺序输出。 输入格式    输入的第一行包含一个整数n，表示给定数字的个数。    第二行包含n个整数，相邻的整数之间用一个空格分隔，表示所给定的整数。 输出格式    输出多行，每行包含两个整数，分别表示一个给定的整数和它出现的次数。按出现次数递减的顺序输出。如果两个整数出现的次数一样多，则先输出值较小的，然后输出值较大的。 样例输入  12  5 2 3 3 1 3 4 2 5 2 3 5  样例输出  3 4 2 3 5 3 1 1 4 1  评测用例规模与约定    1 ≤ n ≤ 1000，给出的数都是不超过1000的非负整数。', ' private static String getToday(){\\r\\n		return new SimpleDateFormat(\"yyyyMMdd\").format(new Date());\\r\\n	}\\r\\n	\\r\\n	private static String getYesterday(){\\r\\n		return new SimpleDateFormat(\"yyyyMMdd\").format(new Date(new Da', '00000000001', '000000020.0');
INSERT INTO `t_qss` VALUES ('143', '97', '218', '问题描述    有一类节日的日期并不是固定的，而是以“a月的第b个星期c”的形式定下来的，比如说母亲节就定为每年的五月的第二个星期日。    现在，给你a，b，c和y1, y2(1850 ≤ y1, y2 ≤ 2050)，希望你输出从公元y1年到公元y2年间的每年的a月的第b个星期c的日期。    提示：关于闰年的规则：年份是400的整数倍时是闰年，否则年份是4的倍数并且不是100的倍数时是闰年，其他年份都不是闰年。例如1900年就不是闰年，而2000年是闰年。    为了方便你推算，已知1850年1月1日是星期二。 输入格式    输入包含恰好一行，有五个整数a, b, c, y1, y2。其中c=1, 2, ……, 6, 7分别表示星期一、二、……、六、日。 输出格式    对于y1和y2之间的每一个年份，包括y1和y2，按照年份从小到大的顺序输出一行。    如果该年的a月第b个星期c确实存在，则以\"yyyy/mm/dd\"的格式输出，即输出四位数的年份，两位数的月份，两位数的日期，中间用斜杠“/”分隔，位数不足时前补零。    如果该年的a月第b个星期c并不存在，则输出\"none\"（不包含双引号)。 样例输入  5 2 7 2014 2015  样例输出  2014/05/11 2015/05/10  评测用例规模与约定    所有评测用例都满足：1 ≤ a ≤ 12，1 ≤ b ≤ 5，1 ≤ c ≤ 7，1850 ≤ y1, y2 ≤ 2050。', ' private static String getToday(){\\r\\n		return new SimpleDateFormat(\"yyyyMMdd\").format(new Date());\\r\\n	}\\r\\n	\\r\\n	private static String getYesterday(){\\r\\n		return new SimpleDateFormat(\"yyyyMMdd\").format(new Date(new Da', '00000000000', '000000000.0');
INSERT INTO `t_qss` VALUES ('144', '97', '221', '问题描述    给出一个字符串和多行文字，在这些文字中找到字符串出现的那些行。你的程序还需支持大小写敏感选项：当选项打开时，表示同一个字母的大写和小写看作不同的字符；当选项关闭时，表示同一个字母的大写和小写看作相同的字符。 输入格式    输入的第一行包含一个字符串S，由大小写英文字母组成。    第二行包含一个数字，表示大小写敏感的选项，当数字为0时表示大小写不敏感，当数字为1时表示大小写敏感。    第三行包含一个整数n，表示给出的文字的行数。    接下来n行，每行包含一个字符串，字符串由大小写英文字母组成，不含空格和其他字符。 输出格式    输出多行，每行包含一个字符串，按出现的顺序依次给出那些包含了字符串S的行。 样例输入  Hello 1 5  HelloWorld HiHiHelloHiHi GrepIsAGreatTool HELLO  HELLOisNOTHello  样例输出  HelloWorld HiHiHelloHiHi HELLOisNOTHello  样例说明    在上面的样例中，第四个字符串虽然也是Hello，但是大小写不正确。如果将输入的第二行改为0，则第四个字符串应该输出。 评测用例规模与约定    1<=n<=100，每个字符串的长度不超过100。', ' private static String getToday(){\\r\\n		return new SimpleDateFormat(\"yyyyMMdd\").format(new Date());\\r\\n	}\\r\\n	\\r\\n	private static String getYesterday(){\\r\\n		return new SimpleDateFormat(\"yyyyMMdd\").format(new Date(new Da', '00000000000', '000000000.0');

-- ----------------------------
-- Table structure for t_question_type
-- ----------------------------
DROP TABLE IF EXISTS `t_question_type`;
CREATE TABLE `t_question_type` (
  `qt_id` int(11) NOT NULL AUTO_INCREMENT,
  `qt_name` varchar(50) NOT NULL,
  `qt_description` varchar(100) NOT NULL,
  `qt_score` varchar(10) NOT NULL,
  PRIMARY KEY (`qt_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_question_type
-- ----------------------------
INSERT INTO `t_question_type` VALUES ('1', '编程题', '编程题', '100');
INSERT INTO `t_question_type` VALUES ('2', '单选题', '单选题', '2');
INSERT INTO `t_question_type` VALUES ('3', '填空题', '填空题', '2');

-- ----------------------------
-- Table structure for t_subject
-- ----------------------------
DROP TABLE IF EXISTS `t_subject`;
CREATE TABLE `t_subject` (
  `s_id` int(11) NOT NULL AUTO_INCREMENT,
  `s_name` varchar(50) NOT NULL,
  `s_description` varchar(225) DEFAULT NULL,
  PRIMARY KEY (`s_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_subject
-- ----------------------------
INSERT INTO `t_subject` VALUES ('1', 'CCF模拟考试', '共5道编程题，每道100分，共500分。');
INSERT INTO `t_subject` VALUES ('2', 'java程序设计', '10道选择，每题1分，共10分。10道填空，每题1分，共10分。10道判断，每题1分，共10分。2道分析题，每题5分，共10分。3道编程题，每题20分，共60分。共100分。');

-- ----------------------------
-- Table structure for t_subject_question_type
-- ----------------------------
DROP TABLE IF EXISTS `t_subject_question_type`;
CREATE TABLE `t_subject_question_type` (
  `sqt_id` int(11) NOT NULL AUTO_INCREMENT,
  `s_id` int(11) NOT NULL,
  `q_id` int(11) NOT NULL,
  PRIMARY KEY (`sqt_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_subject_question_type
-- ----------------------------
INSERT INTO `t_subject_question_type` VALUES ('1', '1', '1');
INSERT INTO `t_subject_question_type` VALUES ('2', '2', '2');
INSERT INTO `t_subject_question_type` VALUES ('3', '2', '3');

-- ----------------------------
-- Table structure for t_user
-- ----------------------------
DROP TABLE IF EXISTS `t_user`;
CREATE TABLE `t_user` (
  `u_id` int(11) NOT NULL AUTO_INCREMENT,
  `u_username` varchar(20) NOT NULL,
  `u_password` varchar(20) NOT NULL,
  `u_number` varchar(20) NOT NULL,
  `u_role` varchar(11) NOT NULL,
  `u_class` varchar(20) NOT NULL,
  PRIMARY KEY (`u_id`,`u_number`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_user
-- ----------------------------
INSERT INTO `t_user` VALUES ('1', '许晓东', '123456', '201316920706', '学生', '软件1304班');
INSERT INTO `t_user` VALUES ('2', '许小东', '123456', '201316920707', '学生', '软件1304班');
INSERT INTO `t_user` VALUES ('3', '李晓东', '123456', '201316920708', '学生', '软件1304班');
INSERT INTO `t_user` VALUES ('4', '张晓东', '123456', '201316920709', '学生', '软件1304班');
INSERT INTO `t_user` VALUES ('5', '王王东', '123456', '201316920705', '学生', '软件1304班');
INSERT INTO `t_user` VALUES ('6', '许东', '123456', '201316920704', '学生', '软件1304班');
INSERT INTO `t_user` VALUES ('7', '许晓', '123456', '201316920703', '学生', '软件1304班');
INSERT INTO `t_user` VALUES ('8', '许晓东', '123456', '123456', '老师', '软件职工');
INSERT INTO `t_user` VALUES ('9', '许大东', '123456', '12345678', '老师', '软件职工');
INSERT INTO `t_user` VALUES ('10', '许许', '123456', '201316920701', '学生', '软件1304班');
INSERT INTO `t_user` VALUES ('11', '许许东', '123456', '201316920702', '学生', '软件1304班');
INSERT INTO `t_user` VALUES ('12', '许东东', '123456', '201316920710', '学生', '软件1304班');
INSERT INTO `t_user` VALUES ('13', '许本', '123456', '201316920711', '学生', '软件1304班');
INSERT INTO `t_user` VALUES ('14', '许东晓', '123456', '201316920712', '学生', '软件1304班');

-- ----------------------------
-- Table structure for t_user_exam
-- ----------------------------
DROP TABLE IF EXISTS `t_user_exam`;
CREATE TABLE `t_user_exam` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `u_number` varchar(20) NOT NULL,
  `e_id` int(11) NOT NULL,
  `ue_applyStatus` int(11) unsigned zerofill NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=99 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_user_exam
-- ----------------------------
INSERT INTO `t_user_exam` VALUES ('92', '201316920701', '28', '00000000004');
INSERT INTO `t_user_exam` VALUES ('93', '201316920701', '31', '00000000003');
INSERT INTO `t_user_exam` VALUES ('94', '201316920702', '28', '00000000004');
INSERT INTO `t_user_exam` VALUES ('95', '201316920702', '31', '00000000003');
INSERT INTO `t_user_exam` VALUES ('96', '201316920703', '28', '00000000004');
INSERT INTO `t_user_exam` VALUES ('97', '201316920706', '32', '00000000004');
INSERT INTO `t_user_exam` VALUES ('98', '201316920706', '31', '00000000003');
